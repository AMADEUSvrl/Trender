//@version=4                                                                                                                                     
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                                                                     
//                                                                                                                                       //
//            ██████╗ ██╗ ██████╗ ███╗   ███╗ █████╗ ████████╗    ████████╗██████╗ ███████╗███╗   ██╗██████╗ ███████╗██████╗             //   
//            ██╔══██╗██║██╔════╝ ████╗ ████║██╔══██╗╚══██╔══╝    ╚══██╔══╝██╔══██╗██╔════╝████╗  ██║██╔══██╗██╔════╝██╔══██╗            //   
//            ██████╔╝██║██║  ███╗██╔████╔██║███████║   ██║          ██║   ██████╔╝█████╗  ██╔██╗ ██║██║  ██║█████╗  ██████╔╝            //   
//            ██╔══██╗██║██║   ██║██║╚██╔╝██║██╔══██║   ██║          ██║   ██╔══██╗██╔══╝  ██║╚██╗██║██║  ██║██╔══╝  ██╔══██╗            //   
//            ██████╔╝██║╚██████╔╝██║ ╚═╝ ██║██║  ██║   ██║          ██║   ██║  ██║███████╗██║ ╚████║██████╔╝███████╗██║  ██║            //   
//            ╚═════╝ ╚═╝ ╚═════╝ ╚═╝     ╚═╝╚═╝  ╚═╝   ╚═╝          ╚═╝   ╚═╝  ╚═╝╚══════╝╚═╝  ╚═══╝╚═════╝ ╚══════╝╚═╝  ╚═╝            //   
//                                                                                                                                       //  
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                     Trender is licensed under the GNU General Public License v3.0                                     //
//                                              Totally free to modify. Open source, GPL-3.0                                             //   
//                                                 Trender built by BigMat, version 3.1.0                                                //
//                                                   https://github.com/BigMat1/Trender                                                  //
   
//                                                  More info at the bottom of the code.                                                 //   

//                                                    Ideas inspired by works such as:                                                   //   
//                                                 'TrendRider' by 'TradeCiety', Rolf S.                                                 //   
//                                        'Setup Tabajara' by 'Ogro de Wall Street', André Machado                                       //   
//                                                  'Simple 17 Indicator BF' by 'Bennef'                                                 //   

study(title = 'Trender', shorttitle = 'Trender', overlay = true)

                                                                                                                                            
//                                                                                                                                       //   
//                                            ██╗███╗   ██╗██████╗ ██╗   ██╗████████╗███████╗                                            //   
//                                            ██║████╗  ██║██╔══██╗██║   ██║╚══██╔══╝██╔════╝                                            //   
//                                            ██║██╔██╗ ██║██████╔╝██║   ██║   ██║   ███████╗                                            //   
//                                            ██║██║╚██╗██║██╔═══╝ ██║   ██║   ██║   ╚════██║                                            //   
//                                            ██║██║ ╚████║██║     ╚██████╔╝   ██║   ███████║                                            //   
//                                            ╚═╝╚═╝  ╚═══╝╚═╝      ╚═════╝    ╚═╝   ╚══════╝                                            //   
//                                                                                                                                       //   

// Theme Inputs
theme_title0 = input(false, title = "════════ THEME ════════")
// Theme Changes
overlay = input(false, title = 'Show theme color.')
theme = input(title = 'Theme', defval = 'Modern Dark', options = ['Classic Light', 'Classic Dark', 'Modern Light', 'Modern Dark', 'Pinky'])


// Trend Inputs
trend_title0 = input(false, title = "════════ TREND ════════")

show_trend_color = input(true, title = 'Show trend color.') 
trend_color_type1 = input(title = 'Trend Color Type', defval = 'MA', options = ['MA', 'MA2', 'MA3', 'MA4', 'MA5', 'MA6', 'None'])


// MA Inputs
ma1_title = input(false, title = "════════ MA ════════")

show_ma = input(false, title = 'Show MA.')
ma_type = input(title = 'MA Type', defval = 'EMA', options = ['SMA', 'EMA', 'SWMA', 'WMA', 'VWMA', 'RMA', 'ALMA', 'LSMA', 'HMA'])
ma_source = input(title = 'MA Source', defval = close)  
ma_length = input(title = 'MA Length' , defval = 15)
ma_offset = input(title = 'MA Offset', defval = 0)
alma_sigma = input(title = 'ALMA Sigma', defval = 0)


// MA2 Inputs
ma2_title = input(false, title = "════════ MA2 ════════")

show_ma2 = input(false, title = 'Show MA2.')
ma2_type = input(title = 'MA2 Type', defval = 'SMA', options = ['SMA', 'EMA', 'SWMA', 'WMA', 'VWMA', 'RMA', 'ALMA', 'LSMA', 'HMA'])
ma2_source = input(title = 'MA2 Source', defval = close)
ma2_length = input(title = 'MA2 Length' , defval = 9)
ma2_offset = input(title = 'MA2 Offset', defval = 0)
alma2_sigma = input(title = 'ALMA2 Sigma', defval = 0)


// MA3 Inputs
ma3_title = input(false, title = "════════ MA3 ════════")

show_ma3 = input(false, title = 'Show MA3.')
ma3_type = input(title = 'MA3 Type', defval = 'SWMA', options = ['SMA', 'EMA', 'SWMA', 'WMA', 'VWMA', 'RMA', 'ALMA', 'LSMA', 'HMA'])
ma3_source = input(title = 'MA3 Source', defval = close)
ma3_length = input(title = 'MA3 Length' , defval = 21)
ma3_offset = input(title = 'MA3 Offset', defval = 0)
alma3_sigma = input(title = 'ALMA3 Sigma', defval = 0)


// MA4 Inputs
ma4_title = input(false, title = "════════ MA4 ════════")

show_ma4 = input(false, title = 'Show MA4.')
ma4_type = input(title = 'MA4 Type', defval = 'WMA', options = ['SMA', 'EMA', 'SWMA', 'WMA', 'VWMA', 'RMA', 'ALMA', 'LSMA', 'HMA'])
ma4_source = input(title = 'MA4 Source', defval = close)
ma4_length = input(title = 'MA4 Length' , defval = 33)
ma4_offset = input(title = 'MA4 Offset', defval = 0)
alma4_sigma = input(title = 'ALMA4 Sigma', defval = 0)


// MA5 Inputs
ma5_title = input(false, title = "════════ MA5 ════════")

show_ma5 = input(false, title = 'Show MA5.')
ma5_type = input(title = 'MA5 Type', defval = 'VWMA', options = ['SMA', 'EMA', 'SWMA', 'WMA', 'VWMA', 'RMA', 'ALMA', 'LSMA', 'HMA'])
ma5_source = input(title = 'MA5 Source', defval = close)
ma5_length = input(title = 'MA5 Length' , defval = 39)
ma5_offset = input(title = 'MA5 Offset', defval = 0)
alma5_sigma = input(title = 'ALMA5 Sigma', defval = 0)


// MA6 Inputs
ma6_title = input(false, title = "════════ MA6 ════════")

show_ma6 = input(false, title = 'Show MA6.')
ma6_type = input(title = 'MA6 Type', defval = 'HMA', options = ['SMA', 'EMA', 'SWMA', 'WMA', 'VWMA', 'RMA', 'ALMA', 'LSMA', 'HMA'])
ma6_source = input(title = 'MA6 Source', defval = close)
ma6_length = input(title = 'MA6 Length' , defval = 7)
ma6_offset = input(title = 'MA6 Offset', defval = 0)
alma6_sigma = input(title = 'ALMA6 Sigma', defval = 0)


// Consolidation
consolidation_title0 = input(false, title = "════════ CONSOLIDATION ════════")

highlight_consolidations = input(false, title = 'Square Highlight consolidations.')
hightlight_candle = input(false, title = 'Candle Highlight consolidations.')
highlight_band = input(false, title = 'Band Highlight consolidations.')
band_atr_timeframe = input(title="Band ATR Timeframe", type=input.resolution, defval="D")
band_atr_length = input(title="Band ATR Length", defval = 14, minval = 1)
band_atr_size = input(title='Band ATR / Channel Size', defval = float(12))
band_smoothing = input(title="Band Smoothing", defval="SMA", options=["RMA", "SMA", "EMA", "WMA"])
slope_type = input(title= 'Slope MA type', defval = 'EMA', options = ['SMA', 'EMA', 'SWMA', 'WMA', 'VWMA', 'RMA', 'ALMA', 'LSMA', 'HMA'])
slope_source = input(title = 'Slope MA Source', defval = close) 
// slope_threshold = input(defval = 9.4, title = 'Consolidation Slope Threshold', step = 0.1) 
slope_atr = input(title = 'Slope ATR', defval = 14)
slope_length = input(title = 'Slope MA Length' , defval = 9)
slope_offset = input(title = 'Slope MA Offset', defval = 0)
slope_alma_sigma = input(title = 'Slope ALMA Sigma', defval = 0)


// Ignition
ignition_title0 = input(false, title = "════════ IGNITION ════════")

show_possible_entry = input(true, title = 'Show possible entry lines.')
show_ignition = input(true, title = 'Show ignition.')
show_top_bottom = input(false, title = 'Show tops and bottoms. T&B')

//                                                                                                                                       //
//                                              ████████╗██╗  ██╗███████╗███╗   ███╗███████╗                                             //     
//                                              ╚══██╔══╝██║  ██║██╔════╝████╗ ████║██╔════╝                                             //     
//                                                 ██║   ███████║█████╗  ██╔████╔██║█████╗                                               //     
//                                                 ██║   ██╔══██║██╔══╝  ██║╚██╔╝██║██╔══╝                                               //     
//                                                 ██║   ██║  ██║███████╗██║ ╚═╝ ██║███████╗                                             //     
//                                                 ╚═╝   ╚═╝  ╚═╝╚══════╝╚═╝     ╚═╝╚══════╝                                             //     
//                                                                                                                                       //     

// Bar Rules
up_candle = close > close[1] 
down_candle = close < close[1]

// Theme Color
theme_color_up = 
  theme == 'Classic Light' ? (#1db954) :
  theme == 'Classic Dark'  ? (#1db954) :
  theme == 'Modern Light'  ? (#00FF9F) :
  theme == 'Modern Dark'   ? (#00FF9F) :
  theme == 'Pinky'         ? (#ffffff) : na

theme_color_down = 
  theme == 'Classic Light' ? (#cc0f16) :  
  theme == 'Classic Dark'  ? (#cc0f16) :
  theme == 'Modern Light'  ? (#FF0043) :
  theme == 'Modern Dark'   ? (#FF0043) :
  theme == 'Pinky'         ? (#fa669d) : na

theme_color_background = 
  theme == 'Classic Light' ? (#ffffff) :  
  theme == 'Classic Dark'  ? (#131722) :
  theme == 'Modern Light'  ? (#ffffff) :
  theme == 'Modern Dark'   ? (#13161F) :
  theme == 'Pinky'         ? (#ffcbd9) : na

// Show Theme Color.
barcolor(up_candle and overlay ? theme_color_up : na, title = 'Show Theme Color Up Candle')
barcolor(down_candle and overlay ? theme_color_down : na, title = 'Show Theme Color Down Candle')
bgcolor(overlay ? theme_color_background : na, title = 'Show Theme Color Background', transp = 0)


//                                                                                                                                       //   
//                                                          ███╗   ███╗ █████╗                                                           //   
//                                                          ████╗ ████║██╔══██╗                                                          //   
//                                                          ██╔████╔██║███████║                                                          //   
//                                                          ██║╚██╔╝██║██╔══██║                                                          //   
//                                                          ██║ ╚═╝ ██║██║  ██║                                                          //   
//                                                          ╚═╝     ╚═╝╚═╝  ╚═╝                                                          //   
//                                                                                                                                       //   

// SMA = Simple Moving Average
// EMA = Exponential Moving Average
// SWMA = Symmetrically Weighted Moving Average
// WMA = Weighted Moving Average
// VWMA = Volume-Weighted Moving Average
// RMA = RSI Moving Average
// ALMA = Arnauld Legoux Moving Average, Gaussian distribution as weights for moving average.
// LSMA = Least Squares Moving Average, Linear Regression Curve
// HMA = Hull Moving Average  


ma_formula = 
  ma_type == 'SMA'  ? sma(ma_source, ma_length ):
  ma_type == 'EMA'  ? ema(ma_source, ma_length) :
  ma_type == 'SWMA' ? swma(ma_source) :
  ma_type == 'WMA'  ? wma(ma_source, ma_length) :
  ma_type == 'VWMA' ? vwma(ma_source, ma_length) :
  ma_type == 'RMA'  ? rma(ma_source, ma_length) :
  ma_type == 'ALMA' ? alma(ma_source, ma_length, ma_offset, alma_sigma) : 
  ma_type == 'LSMA' ? linreg(float(ma_source), ma_length, ma_offset) :
  ma_type == 'HMA'  ? wma((2*wma(ma_source, round(ma_length/2))-wma(ma_source, ma_length)), (round(sqrt(ma_length)))) : na


ma2_formula = 
  ma2_type == 'SMA'  ? sma(ma2_source, ma2_length ):
  ma2_type == 'EMA'  ? ema(ma2_source, ma2_length) :
  ma2_type == 'SWMA' ? swma(ma2_source) :
  ma2_type == 'WMA'  ? wma(ma2_source, ma2_length) :
  ma2_type == 'VWMA' ? vwma(ma2_source, ma2_length) :
  ma2_type == 'RMA'  ? rma(ma2_source, ma2_length) :
  ma2_type == 'ALMA' ? alma(ma2_source, ma2_length, ma2_offset, alma2_sigma) : 
  ma2_type == 'LSMA' ? linreg(float(ma2_source), ma2_length, ma2_offset) :
  ma2_type == 'HMA'  ? wma((2*wma(ma2_source, round(ma2_length/2))-wma(ma2_source, ma2_length)), (round(sqrt(ma2_length)))) : na

 
ma3_formula = 
  ma3_type == 'SMA'  ? sma(ma3_source, ma3_length ):
  ma3_type == 'EMA'  ? ema(ma3_source, ma3_length) :
  ma3_type == 'SWMA' ? swma(ma3_source) :
  ma3_type == 'WMA'  ? wma(ma3_source, ma3_length) :
  ma3_type == 'VWMA' ? vwma(ma3_source, ma3_length) :
  ma3_type == 'RMA'  ? rma(ma3_source, ma3_length) :
  ma3_type == 'ALMA' ? alma(ma3_source, ma3_length, ma3_offset, alma3_sigma) : 
  ma3_type == 'LSMA' ? linreg(float(ma3_source), ma3_length, ma3_offset) :
  ma3_type == 'HMA'  ? wma((2*wma(ma3_source, round(ma3_length/2))-wma(ma3_source, ma3_length)), (round(sqrt(ma3_length)))) : na


ma4_formula = 
  ma4_type == 'SMA'  ? sma(ma4_source, ma4_length ):
  ma4_type == 'EMA'  ? ema(ma4_source, ma4_length) :
  ma4_type == 'SWMA' ? swma(ma4_source) :
  ma4_type == 'WMA'  ? wma(ma4_source, ma4_length) :
  ma4_type == 'VWMA' ? vwma(ma4_source, ma4_length) :
  ma4_type == 'RMA'  ? rma(ma4_source, ma4_length) :
  ma4_type == 'ALMA' ? alma(ma4_source, ma4_length, ma4_offset, alma4_sigma) : 
  ma4_type == 'LSMA' ? linreg(float(ma4_source), ma4_length, ma4_offset) :
  ma4_type == 'HMA'  ? wma((2*wma(ma4_source, round(ma4_length/2))-wma(ma4_source, ma4_length)), (round(sqrt(ma4_length)))) : na


ma5_formula = 
  ma5_type == 'SMA'  ? sma(ma5_source, ma5_length ):
  ma5_type == 'EMA'  ? ema(ma5_source, ma5_length) :
  ma5_type == 'SWMA' ? swma(ma5_source) :
  ma5_type == 'WMA'  ? wma(ma5_source, ma5_length) :
  ma5_type == 'VWMA' ? vwma(ma5_source, ma5_length) :
  ma5_type == 'RMA'  ? rma(ma5_source, ma5_length) :
  ma5_type == 'ALMA' ? alma(ma5_source, ma5_length, ma5_offset, alma5_sigma) : 
  ma5_type == 'LSMA' ? linreg(float(ma5_source), ma5_length, ma5_offset) :
  ma5_type == 'HMA'  ? wma((2*wma(ma5_source, round(ma5_length/2))-wma(ma5_source, ma5_length)), (round(sqrt(ma5_length)))) : na

 
ma6_formula = 
  ma6_type == 'SMA'  ? sma(ma6_source, ma6_length ):
  ma6_type == 'EMA'  ? ema(ma6_source, ma6_length) :
  ma6_type == 'SWMA' ? swma(ma6_source) :
  ma6_type == 'WMA'  ? wma(ma6_source, ma6_length) :
  ma6_type == 'VWMA' ? vwma(ma6_source, ma6_length) :
  ma6_type == 'RMA'  ? rma(ma6_source, ma6_length) :
  ma6_type == 'ALMA' ? alma(ma6_source, ma6_length, ma6_offset, alma6_sigma) : 
  ma6_type == 'LSMA' ? linreg(float(ma6_source), ma6_length, ma6_offset) :
  ma6_type == 'HMA'  ? wma((2*wma(ma6_source, round(ma6_length/2))-wma(ma6_source, ma6_length)), (round(sqrt(ma6_length)))) : na

                                                                                                                                                                                                                                                                
//                                                                                                                                       //   
//                             ███╗   ███╗ █████╗        ██╗        ██████╗ ██████╗ ██╗      ██████╗ ██████╗                             //  
//                             ████╗ ████║██╔══██╗       ██║       ██╔════╝██╔═══██╗██║     ██╔═══██╗██╔══██╗                            //   
//                             ██╔████╔██║███████║    ████████╗    ██║     ██║   ██║██║     ██║   ██║██████╔╝                            //  
//                             ██║╚██╔╝██║██╔══██║    ██╔═██╔═╝    ██║     ██║   ██║██║     ██║   ██║██╔══██╗                            //  
//                             ██║ ╚═╝ ██║██║  ██║    ██████║      ╚██████╗╚██████╔╝███████╗╚██████╔╝██║  ██║                            //   
//                             ╚═╝     ╚═╝╚═╝  ╚═╝    ╚═════╝       ╚═════╝ ╚═════╝ ╚══════╝ ╚═════╝ ╚═╝  ╚═╝                            //   
//                                                                                                                                       //   
                                                                                                                                            
//MA
ma_color = 
  ma_formula > ma_formula[1] and close > ma_formula ? theme_color_up   : 
  ma_formula < ma_formula[1] and close < ma_formula ? theme_color_down : color.white

ma_plot1 = plot(show_ma ? ma_formula : na, linewidth = 2, offset = ma_offset, color = ma_color, title = "MA")

//MA2
ma2_color = 
  ma2_formula > ma2_formula[1] and close > ma2_formula ? theme_color_up   : 
  ma2_formula < ma2_formula[1] and close < ma2_formula ? theme_color_down : color.white

ma2_plot1 = plot(show_ma2 ? ma2_formula : na, linewidth = 2, offset = ma2_offset, color = ma2_color, title = "MA2")

//MA3
ma3_color = 
  ma3_formula > ma3_formula[1] and close > ma3_formula ? theme_color_up   : 
  ma3_formula < ma3_formula[1] and close < ma3_formula ? theme_color_down : color.white

ma3_plot1 = plot(show_ma3 ? ma3_formula : na, linewidth = 2, offset = ma3_offset, color = ma3_color, title = "MA3")

//MA4
ma4_color = 
  ma4_formula > ma4_formula[1] and close > ma4_formula ? theme_color_up   : 
  ma4_formula < ma4_formula[1] and close < ma4_formula ? theme_color_down : color.white

ma4_plot1 = plot(show_ma4 ? ma4_formula : na, linewidth = 2, offset = ma4_offset, color = ma4_color, title = "MA4")

//MA5
ma5_color = 
  ma5_formula > ma5_formula[1] and close > ma5_formula ? theme_color_up   : 
  ma5_formula < ma5_formula[1] and close < ma5_formula ? theme_color_down : color.white

ma5_plot1 = plot(show_ma5 ? ma5_formula : na, linewidth = 2, offset = ma5_offset, color = ma5_color, title = "MA5")

//MA6
ma6_color = 
  ma6_formula > ma6_formula[1] and close > ma6_formula ? theme_color_up   : 
  ma6_formula < ma6_formula[1] and close < ma6_formula ? theme_color_down : color.white

ma6_plot1 = plot(show_ma6 ? ma6_formula : na, linewidth = 2, offset = ma6_offset, color = ma6_color, title = "MA6")


//                                                                                                                                       //   
//                                              ████████╗██████╗ ███████╗███╗   ██╗██████╗                                               //   
//                                              ╚══██╔══╝██╔══██╗██╔════╝████╗  ██║██╔══██╗                                              //   
//                                                 ██║   ██████╔╝█████╗  ██╔██╗ ██║██║  ██║                                              //   
//                                                 ██║   ██╔══██╗██╔══╝  ██║╚██╗██║██║  ██║                                              //   
//                                                 ██║   ██║  ██║███████╗██║ ╚████║██████╔╝                                              //   
//                                                 ╚═╝   ╚═╝  ╚═╝╚══════╝╚═╝  ╚═══╝╚═════╝                                               //   
//                                                                                                                                       //   
// Rules
plot_close = plot(close, color = na, title = 'Close Plot')

trend_color_formula = 
  trend_color_type1 == 'MA' ? ma_formula :
  trend_color_type1 == 'MA2' ? ma2_formula :
  trend_color_type1 == 'MA3' ? ma3_formula :
  trend_color_type1 == 'MA4' ? ma4_formula :
  trend_color_type1 == 'MA5' ? ma5_formula :
  trend_color_type1 == 'MA6' ? ma6_formula : na

trend_color_condition = 
  trend_color_type1 == 'MA' ? ma_color :
  trend_color_type1 == 'MA2' ? ma2_color :
  trend_color_type1 == 'MA3' ? ma3_color :
  trend_color_type1 == 'MA4' ? ma4_color :
  trend_color_type1 == 'MA5' ? ma5_color :
  trend_color_type1 == 'MA6' ? ma6_color : na

// Classic Theme
classic_condition = if show_trend_color == true
    if theme == 'Classic Light' or theme == 'Classic Dark'
        true
    else
        false

bgcolor(classic_condition ? trend_color_condition : na, title = 'Classic Theme Trend Color Background')

// Modern Theme
modern_condition = if show_trend_color == true
    if theme == 'Modern Light' or theme == 'Modern Dark' or theme == 'Pinky'
        true
    else
        false      

plot_trend_type1 = plot(modern_condition ? trend_color_formula : na, color = trend_color_condition, transp = 0, linewidth = 2, title = 'Modern Theme Trend MA Color')
fill(plot_close, plot_trend_type1, color = trend_color_condition, transp = 80, title = 'Modern Theme Fill Trend Color')


//                                                                                                                                       //  
//                  ██████╗ ██████╗ ███╗   ██╗███████╗ ██████╗ ██╗     ██╗██████╗  █████╗ ████████╗██╗ ██████╗ ███╗   ██╗                //   
//                 ██╔════╝██╔═══██╗████╗  ██║██╔════╝██╔═══██╗██║     ██║██╔══██╗██╔══██╗╚══██╔══╝██║██╔═══██╗████╗  ██║                //   
//                 ██║     ██║   ██║██╔██╗ ██║███████╗██║   ██║██║     ██║██║  ██║███████║   ██║   ██║██║   ██║██╔██╗ ██║                //   
//                 ██║     ██║   ██║██║╚██╗██║╚════██║██║   ██║██║     ██║██║  ██║██╔══██║   ██║   ██║██║   ██║██║╚██╗██║                //   
//                 ╚██████╗╚██████╔╝██║ ╚████║███████║╚██████╔╝███████╗██║██████╔╝██║  ██║   ██║   ██║╚██████╔╝██║ ╚████║                //   
//                  ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝ ╚═════╝ ╚══════╝╚═╝╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝                //   
//                                                                                                                                       //   

// Slope - MA Angle
slope_formula = 
  slope_type == 'SMA'  ? sma(slope_source, slope_length):
  slope_type == 'EMA'  ? ema(slope_source, slope_length) :
  slope_type == 'SWMA' ? swma(slope_source) :
  slope_type == 'WMA'  ? wma(slope_source, slope_length) :
  slope_type == 'VWMA' ? vwma(slope_source, slope_length) :
  slope_type == 'RMA'  ? rma(slope_source, slope_length) :
  slope_type == 'ALMA' ? alma(slope_source, slope_length, slope_offset, slope_alma_sigma) : 
  slope_type == 'LSMA' ? linreg(float(slope_source), slope_length, slope_offset) :
  slope_type == 'HMA'  ? wma((2*wma(slope_source, round(slope_length/2))-wma(slope_source, slope_length)), (round(sqrt(slope_length)))) : na

angle(_ma_source) =>
    rad2degree = float(180 / 3.1415926535)
    angle_formula = 
      float(rad2degree * atan((_ma_source[0] - _ma_source[1]) / atr(slope_atr)))
    angle_formula

ma_slope = float(angle(slope_formula))
//threshold_filter = float(abs(ma_slope)) < slope_threshold
threshold_filter = ema(float(abs(ma_slope)), 9) < ema(float(abs(ma_slope)), 15)

//Plot Yellow Square * The Consolidation Highlighter
plotshape(highlight_consolidations ? threshold_filter : na, title = "Slope Consolidation Highlighter",style = shape.square,location = location.abovebar, size=size.auto, color = color.yellow, transp = 0)
plotshape(highlight_consolidations ? threshold_filter : na, title = "Slope Consolidation Highlighter",style = shape.square,location = location.belowbar, size=size.auto, color = color.yellow, transp = 0)

//ATR
atr_function(source, length) =>
    if band_smoothing == "RMA"
        rma(source, length)
    else
        if band_smoothing == "SMA"
            sma(source, length)
        else
            if band_smoothing == "EMA"
                ema(source, length)
            else
                wma(source, length)

out = security(syminfo.tickerid, band_atr_timeframe, atr_function(tr(true), band_atr_length))

channel_size = out/band_atr_size

basis = ema(close, 9)

upper1 = basis + (channel_size)
lower1 = basis - (channel_size)

b1 = plot(basis, color = #FFEB3B, transp = 100)

condition_upper = (close > basis) and threshold_filter
condition_lower = (close < basis) and threshold_filter

condition_upper2 = (close < basis) and threshold_filter
condition_lower2 = (close > basis) and threshold_filter

u1 = plot(highlight_band and condition_upper ? upper1 : na, color = #FFEB3B, transp = 100)
l1 = plot(highlight_band and condition_lower ? lower1 : na, color = #FFEB3B, transp = 100)

u2 = plot(highlight_band and condition_upper2 ? upper1 : na, color = #FFEB3B, transp = 89, style = plot.style_circles)
l2 = plot(highlight_band and condition_lower2 ? lower1 : na, color = #FFEB3B, transp = 89, style = plot.style_circles)

fill(b1, u1, color= #FFEB3B, transp=95, title="Background Upper")
fill(b1, l1, color= #FFEB3B, transp=95, title="Background Lower")

fill(b1, u2, color= #FFEB3B, transp=99, title="Background Upper 2")
fill(b1, l2, color= #FFEB3B, transp=99, title="Background Lower 2")

barcolor(threshold_filter and hightlight_candle ? #FFFFFF : na, title = 'Show Theme Color Up Candle')

//                                                                                                                                       //   
//                                        ██╗ ██████╗ ███╗   ██╗██╗████████╗██╗ ██████╗ ███╗   ██╗                                       //   
//                                        ██║██╔════╝ ████╗  ██║██║╚══██╔══╝██║██╔═══██╗████╗  ██║                                       //   
//                                        ██║██║  ███╗██╔██╗ ██║██║   ██║   ██║██║   ██║██╔██╗ ██║                                       //   
//                                        ██║██║   ██║██║╚██╗██║██║   ██║   ██║██║   ██║██║╚██╗██║                                       //   
//                                        ██║╚██████╔╝██║ ╚████║██║   ██║   ██║╚██████╔╝██║ ╚████║                                       //   
//                                        ╚═╝ ╚═════╝ ╚═╝  ╚═══╝╚═╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝                                       //   
//                                                                                                                                       //

// Ignition Rules
up_trend = (crossover(ema(close, 9), ema(close, 15))) and ema(float(abs(ma_slope)), 9) > ema(float(abs(ma_slope)), 15)
// up_trend = (crossover(ema(close, 9), ema(close, 15))) and float(abs(ma_slope)) < slope_threshold 
down_trend = (crossover(ema(close, 15), ema(close, 9))) and ema(float(abs(ma_slope)), 9) > ema(float(abs(ma_slope)), 15)
// down_trend = (crossover(ema(close, 15), ema(close, 9))) and float(abs(ma_slope)) < slope_threshold


// Plot Ignition
plotshape(show_ignition ? up_trend : na, title = 'Ignition!', style = shape.triangleup, location = location.belowbar, color = theme_color_up, size = size.small)
plotshape(show_ignition ? down_trend : na, title = 'Ignition!', style = shape.triangledown, location = location.abovebar, color = theme_color_down, size = size.small)

// Possible Entry Lines Rules
ignition_ema_1 = ema(close, 15) 
ignition_ema_2 = ema(close, 21)
ema_status = ignition_ema_1[1] < ignition_ema_1

long_92 = ((high < high[1] and close < low[1] and ema_status)) or (ema_status and close < low[1])
long_93 = (ema_status and close[1] < close[2] and close < close[2] and low[1] > low[2])   
long_94 = (ema_status[3] and ema_status[2] and not ema_status[1] and ema_status)
long_21a = ignition_ema_2[5] < ignition_ema_2[4] and ignition_ema_2[4] < ignition_ema_2[3] and ignition_ema_2[3] < ignition_ema_2[2] and ignition_ema_2[2] <= ignition_ema_2[1] and ignition_ema_2[1] <= ignition_ema_2
long_21b = low <= ignition_ema_2 and low[1] > ignition_ema_2[1] and low[2] > ignition_ema_2[2] and low[3] > ignition_ema_2[3] and close >= ignition_ema_2

short_92 = (low > low[1] and close > high[1] and not ema_status) or (not ema_status and close > high[1])
short_93 = (not ema_status and close[1] > close[2] and close > close[2] and high[1] < high[2])
short_94 = (not ema_status[3] and not ema_status[2] and ema_status[1] and not ema_status)
short_21a = ignition_ema_2[5] > ignition_ema_2[4] and ignition_ema_2[4] > ignition_ema_2[3] and ignition_ema_2[3] > ignition_ema_2[2] and ignition_ema_2[2] >= ignition_ema_2[1] and ignition_ema_2[1] >= ignition_ema_2
short_21b = high >= ignition_ema_2 and high[1] < ignition_ema_2[1] and high[2] < ignition_ema_2[2] and high[3] < ignition_ema_2[3]  and close <= ignition_ema_2

// CONDITIONS TO PLOT ENTRY WITH LINE
// LONG
var t_long = int(10e10)
t_long := min(t_long, time - nz(time[1]))
y_long = high * 1.00003

// SHORT
var t_short = int(10e10)
t_short := min(t_short, time - nz(time[1]))
y_short = low * 0.99997

// PLOT ENTRY WITH LINE
if show_possible_entry ? long_92 : na
    line.new(time, y_long, time + t_long, y_long, xloc.bar_time, color = theme_color_up, width = 3)
if show_possible_entry ? long_93 : na
    line.new(time, y_long, time + t_long, y_long, xloc.bar_time, color = theme_color_up, width = 3)
if show_possible_entry ? long_94 : na
    line.new(time, y_long, time + t_long, y_long, xloc.bar_time, color = theme_color_up, width = 3)
if show_possible_entry ? long_21a and long_21b : na
    line.new(time, y_long, time + t_long, y_long, xloc.bar_time, color = theme_color_up, width = 3)
    
if show_possible_entry ? short_92 : na
    line.new(time, y_short, time + t_short, y_short, xloc.bar_time, color = theme_color_down, width = 3)
if show_possible_entry ? short_93 : na
    line.new(time, y_short, time + t_short, y_short, xloc.bar_time, color = theme_color_down, width = 3)
if show_possible_entry ? short_94 : na
    line.new(time, y_short, time + t_short, y_short, xloc.bar_time, color = theme_color_down, width = 3)
if show_possible_entry ? short_21a and short_21b : na
    line.new(time, y_short, time + t_short, y_short, xloc.bar_time, color = theme_color_down, width = 3)

// CONDITIONS TO PLOT ENTRY WITH CHAR
//condition_long92 = long_92 ? high : na
//condition_long93 = long_93 ? high : na
//condition_long94 = long_94 ? high : na
//sum_condition_long21 = long_21a and long_21b
//condition_long21= sum_condition_long21 ? high : na

//condition_short92 = short_92 ? low : na
//condition_short93 = short_93 ? low : na
//condition_short94 = short_94 ? low : na
//sum_condition_short21 = short_21a and short_21b
//condition_short21 = sum_condition_short21 ? low : na

// PLOT ENTRY WITH CHAR

//plotchar(condition_long92, title = "9.2 long", location = location.absolute, color = color.green, offset = 0, char = '-')
//plotchar(condition_long92, title = "9.2 long", location = location.absolute, color = color.green, offset = 1, char = '-')
//plotchar(condition_long93, title = "9.3 long", location = location.absolute, color = color.green, offset = 0, char = '-')
//plotchar(condition_long93, title = "9.3 long", location = location.absolute, color = color.green, offset = 1, char = '-')
//plotchar(condition_long94, title = "9.4 long", location = location.absolute, color = color.green, offset = 0, char = '-')
//plotchar(condition_long94, title = "9.4 long", location = location.absolute, color = color.green, offset = 1, char = '-')
//plotchar(condition_long21, title = "21 long", location = location.absolute, color = color.green, offset = 0, char = '-')
//plotchar(condition_long21, title = "21 long", location = location.absolute, color = color.green, offset = 1, char = '-')

//plotchar(condition_short92, title = "9.2 short", location = location.absolute, color = color.red, offset = 0, char = '-')
//plotchar(condition_short92, title = "9.2 short", location = location.absolute, color = color.red, offset = 1, char = '-')
//plotchar(condition_short93, title = "9.3 short", location = location.absolute, color = color.red, offset = 0, char = '-')
//plotchar(condition_short93, title = "9.3 short", location = location.absolute, color = color.red, offset = 1, char = '-')
//plotchar(condition_short94, title = "9.4 short", location = location.absolute, color = color.red, offset = 0, char = '-')
//plotchar(condition_short94, title = "9.4 short", location = location.absolute, color = color.red, offset = 1, char = '-')
//plotchar(condition_short21, title = "21 short", location = location.absolute, color = color.red, offset = 0, char = '-')
//plotchar(condition_short21, title = "21 short", location = location.absolute, color = color.red, offset = 1, char = '-')

// Tops and Bottoms Finder

fast_ema = 9
average_ema = 12
slow_ema = 15

didi_slow = (ema(close, slow_ema) - ema(close, average_ema))  
didi_fast = (ema(close, fast_ema) - ema(close, average_ema))

is_uptrend = ema(close, fast_ema) > ema(close, slow_ema) 
is_downtrend = ema(close, fast_ema) < ema(close, slow_ema)

closing_downtrend = didi_slow < didi_slow[1] and didi_slow[1] > didi_slow[2] 
opening_downtrend = didi_slow > didi_slow[1] and didi_slow[1] < didi_slow[2]

closing_uptrend = didi_fast < didi_fast[1] and didi_fast[1] > didi_fast[2]
opening_uptrend = didi_fast > didi_fast[1] and didi_fast[1] < didi_fast[2]

// CONDITIONS TO PLOT WITH CHAR
top_uptrend = is_uptrend and closing_uptrend ? high : na
bottom_uptrend = is_uptrend and opening_uptrend ? low : na

bottom_downtrend = is_downtrend and closing_downtrend ? low : na
top_downtrend = is_downtrend and opening_downtrend ? high : na

plotchar(show_top_bottom ? top_uptrend : na, title = "Top Uptrend", location = location.abovebar, color = color.green, offset = -1, char = 'T')
plotchar(show_top_bottom ? bottom_uptrend : na, title = "Bottom Uptrend", location = location.belowbar, color = color.green, offset = -1, char = 'B')

plotchar(show_top_bottom ?  bottom_downtrend : na, title = "Bottom Downtrend", location = location.belowbar, color = color.red, offset = -1, char = 'B')
plotchar(show_top_bottom ? top_downtrend : na, title = "Top Downtrend", location = location.abovebar, color = color.red, offset = -1, char = 'T')



//                                                                                                                                       //   
//                               ██████╗ ██╗███████╗ ██████╗██╗      █████╗ ██╗███╗   ███╗███████╗██████╗                                //   
//                               ██╔══██╗██║██╔════╝██╔════╝██║     ██╔══██╗██║████╗ ████║██╔════╝██╔══██╗                               //   
//                               ██║  ██║██║███████╗██║     ██║     ███████║██║██╔████╔██║█████╗  ██████╔╝                               //   
//                               ██║  ██║██║╚════██║██║     ██║     ██╔══██║██║██║╚██╔╝██║██╔══╝  ██╔══██╗                               //   
//                               ██████╔╝██║███████║╚██████╗███████╗██║  ██║██║██║ ╚═╝ ██║███████╗██║  ██║                               //   
//                               ╚═════╝ ╚═╝╚══════╝ ╚═════╝╚══════╝╚═╝  ╚═╝╚═╝╚═╝     ╚═╝╚══════╝╚═╝  ╚═╝                               //   
//                                                                                                                                       //   
//                                     No Investment Advice Provided, Don't Use as a Financial Guide.                                    //   
//                  Trender is an indicator that compiles trend-following ideas in a complete friendly-custom indicator.                 //   
//            Based on classic arithmetic moving averages, exponential moving averages, volume and a little bit of Fibonacci.            //   
//            Indicator built and usable for TradingView, focused on easy visualization of the trend and how to code in Pine.            //   
//                                                                                                                                       //                                                                                                                                                           
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                 Totally Open Source, built by BigMat. I was inspired by works such as:                                //   
//                                                 'TrendRider' by 'TradeCiety', Rolf S.                                                 //   
//                                        'Setup Tabajara' by 'Ogro de Wall Street', André Machado                                       //   
//                                                  'Simple 17 Indicator BF' by 'Bennef'                                                 //   
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                     Trender is licensed under the GNU General Public License v3.0                                     //   
//                                                                                                                                       //   
//                                                                                                                                       //   
//            ██████╗ ██╗ ██████╗ ███╗   ███╗ █████╗ ████████╗    ████████╗██████╗ ███████╗███╗   ██╗██████╗ ███████╗██████╗             //   
//            ██╔══██╗██║██╔════╝ ████╗ ████║██╔══██╗╚══██╔══╝    ╚══██╔══╝██╔══██╗██╔════╝████╗  ██║██╔══██╗██╔════╝██╔══██╗            //   
//            ██████╔╝██║██║  ███╗██╔████╔██║███████║   ██║          ██║   ██████╔╝█████╗  ██╔██╗ ██║██║  ██║█████╗  ██████╔╝            //   
//            ██╔══██╗██║██║   ██║██║╚██╔╝██║██╔══██║   ██║          ██║   ██╔══██╗██╔══╝  ██║╚██╗██║██║  ██║██╔══╝  ██╔══██╗            //   
//            ██████╔╝██║╚██████╔╝██║ ╚═╝ ██║██║  ██║   ██║          ██║   ██║  ██║███████╗██║ ╚████║██████╔╝███████╗██║  ██║            //   
//            ╚═════╝ ╚═╝ ╚═════╝ ╚═╝     ╚═╝╚═╝  ╚═╝   ╚═╝          ╚═╝   ╚═╝  ╚═╝╚══════╝╚═╝  ╚═══╝╚═════╝ ╚══════╝╚═╝  ╚═╝            //   
//                                                                                                                                       //
//                                                                                                                                       //   
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
